// Функции основные строительные блоки программы, выглядит так

// function showMessage() {  --- showMessage это имя функции, а в скобках указываются параметры функции, function - обьявление функции
// alert("Всем привет!")  --- Это тело функции, тут пишется код, который сработает при вызове функции
//}

// переменные обьявленные внутри функции, видны только этой функции, но у функции есть доступ к внешним переменным что и так интуитивно понятно

function showMessage(from, text) {
  alert(from + ": " + text)
}
// Это function declaration

showMessage("Аня", "Привет!");
showMessage("Аня", "Как дела?");

// Директива return возвращает значение функции, она может находиться в любом месте тела функции, как только попадается return то функция останавливает свою работу, и возвращает значение в вызвавший её код, return без значения приводит к выходу из функции

/*
Объявление функции имеет вид:

function имя(параметры, через, запятую) {
   тело, код функции
}
Передаваемые значения копируются в параметры функции и становятся локальными переменными.
Функции имеют доступ к внешним переменным. Но это работает только изнутри наружу. Код вне функции не имеет доступа к её локальным переменным.
Функция может возвращать значение. Если этого не происходит, тогда результат равен undefined.
Для того, чтобы сделать код более чистым и понятным, рекомендуется использовать локальные переменные и параметры функций, не пользоваться внешними переменными.

Функция, которая получает параметры, работает с ними и затем возвращает результат, гораздо понятнее функции, вызываемой без параметров, но изменяющей внешние переменные, что чревато побочными эффектами.

Именование функций:

Имя функции должно понятно и чётко отражать, что она делает. Увидев её вызов в коде, вы должны тут же понимать, что она делает, и что возвращает.
Функция – это действие, поэтому её имя обычно является глаголом.
Есть много общепринятых префиксов, таких как: create…, show…, get…, check… и т.д. Пользуйтесь ими как подсказками, поясняющими, что делает функция.
*/


function pow(x, n) {
  let result = x;

  for (let i = 1; i < n; i++) {
    result *= x;
  }
  return result;
}


let x = prompt("Введите число", "");
let n = prompt("Введите степень", "");

if (n < 1) {
  alert("Такое число не подходит!")
} else {
  alert(pow(x, n))
}


// Function Expression
/*
let functionName = function() {
  bla bla bla
}
*/


// Функция колбэк
// function ask(question, yes, no) {
//   if (confirm(question)) yes()
//   else no();
// }

// function showOk() {
//   alert( "Вы согласны." );
// }

// function showCancel() {
//   alert( "Вы отменили выполнение." );
// }

// // использование: функции showOk, showCancel передаются в качестве аргументов ask
// ask("Вы согласны?", showOk, showCancel);


// Пример выполнения кода, где функции идут в качестве аргументов.
// function ask(question, yes, no) {
//   if (confirm(question)) yes()
//   else no();
// }

// ask(
//   "Вы согласны?",
//   function() { alert("Вы согласились."); },
//   function() { alert("Вы отменили выполнение."); }
// );

// Использовать function declaration всегда, а если она не подходит(по причине что функцию нужно видить "снаружи блока кода") тогда используем function expression



// Функции стрелки

// let sum = (a, b) => a + b;

//  Более короткая форма для:

// let sum = function(a, b) {
//   return a + b;
// };


// alert( sum(1, 2) ); // 3

// Функции-стрелки очень удобны для однострочных действий. Они бывают двух типов:

// Без фигурных скобок: (...args) => expression – правая сторона выражение: функция выполняет его и возвращает результат.
// С фигурными скобками: (...args) => { body } – скобки позволяют нам писать многострочные инструкции внутри функции, но при этом необходимо указывать директиву return, чтобы вернуть какое-либо значение.